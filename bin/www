#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("nodeiotserver:server");
var https = require("https");
var http = require("http");
const fs = require("fs");
//const https = require("https");
//const WebSocket = require("ws");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "88");
app.set("port", port);

/**
 * Create HTTP server.
 */

// Read SSL certificate and key
/*const serverOptions = {
  cert: fs.readFileSync("cert/cert.pem", "utf8"),
  key: fs.readFileSync("cert/key.pem", "utf8"),
};*/
//var server = https.createServer(serverOptions, app);
var server = http.createServer( app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  
  console.log("[WEB] server is listening on ",bind);
}

/**
 * Websocket
 */

// Create an HTTPS server
/*const server = https.createServer(serverOptions);*/

// Create a WebSocket server bound to the HTTPS server
/*const wss = new WebSocket.Server({
  server: server,
  path: "/echo",
  verifyClient: (info, cb) => {
    const origin = info.origin;
    // Validate origin here
    cb(true);
  },
});

wss.on("connection", function connection(ws) {
  ws.on("message", function incoming(message) {
    console.log("received: %s", message);
  });

  ws.on("close", function close() {
    console.log("disconnected");
  });

  ws.send("init message to client");
});
*/
